diff -crp linux-sh4-2.6.32.59_stm24_0211/arch/sh/boards/mach-hdk7105/setup.c linux-sh4-2.6.32.59_stm24_0211/arch/sh/boards/mach-hdk7105/setup.c
*** linux-sh4-2.6.32.59_stm24_0211/arch/sh/boards/mach-hdk7105/setup.c	2012-09-14 12:32:11.000000000 +0200
--- linux-sh4-2.6.32.59_stm24_0211/arch/sh/boards/mach-hdk7105/setup.c	2012-09-14 15:22:09.000000000 +0200
***************
*** 27,36 ****
--- 27,70 ----
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/nand.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/spi/spi.h>
  #include <linux/spi/flash.h>
  #include <asm/irq-ilc.h>
  
+ /***** 2011-11-14 D26LF Add:
+     Description:spi flash
+ */
+ #define SPI_FLASH_BOOT
+ /***** 2011-11-14 D26LF Add end ****/
+ 
+ const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+ /*
+ 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+ 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+ 0x40800000 - 0x493FFFFF - linux   (140mb)
+ 0x49400000 - 0x4ABFFFFF - bigphys ( 24mb)
+ 0x4AC00000 - 0x4FFFFFFF - lmi_io  ( 84mb)
+ */
+ static struct bpa2_partition_desc bpa2_parts_table[] = {
+     {
+  	    .name  = "bigphysarea",
+ 	    .start = 0x49400000,
+ 	    .size  = 0x01800000, /* 24 Mb */
+  	    .flags = 0,
+  	    .aka   = NULL
+     },
+     {
+  	    .name  = "LMI_IO",
+ 	    .start = 0x4AC00000,
+ 	    .size  = 0x05400000, /* 84 Mb */
+  	    .flags = 0,
+  	    .aka   = LMI_IO_partalias
+     },
+  };
+ 
  /*
   * Flash setup depends on boot-device:
   *
***************
*** 47,56 ****
   * [Jumper settings based on board v1.2-011]
   */
  
! #define HDK7105_PIO_PCI_SERR  stm_gpio(15, 4)
! #define HDK7105_PIO_PHY_RESET stm_gpio(15, 5)
! #define HDK7105_PIO_PCI_RESET stm_gpio(15, 7)
! #define HDK7105_GPIO_FLASH_WP stm_gpio(6, 4)
  
  
  
--- 81,91 ----
   * [Jumper settings based on board v1.2-011]
   */
  
! //#define HDK7105_PIO_PCI_SERR  stm_gpio(15, 4)
! //#define HDK7105_PIO_PHY_RESET stm_gpio(15, 5)
! #define HDK7105_PIO_PHY_RESET stm_gpio(5, 7)
! //#define HDK7105_PIO_PCI_RESET stm_gpio(15, 7)
! //#define HDK7105_GPIO_FLASH_WP stm_gpio(6, 4)
  
  
  
*************** static void __init hdk7105_setup(char **
*** 68,75 ****
--- 103,113 ----
  	stx7105_configure_asc(3, &(struct stx7105_asc_config) {
  			.hw_flow_control = 1,
  			.is_console = 0, });
+ 
+    	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
+ #if 0
  /* PCI configuration */
  static struct stm_plat_pci_config hdk7105_pci_config = {
  	.pci_irq = {
*************** int pcibios_map_platform_irq(struct pci_
*** 96,101 ****
--- 134,140 ----
          /* We can use the standard function on this board */
  	return stx7105_pcibios_map_platform_irq(&hdk7105_pci_config, pin);
  }
+ #endif  /* 0 */
  
  static struct platform_device hdk7105_leds = {
  	.name = "leds-gpio",
*************** static struct platform_device hdk7105_fr
*** 160,166 ****
  static int hdk7105_phy_reset(void *bus)
  {
  	gpio_set_value(HDK7105_PIO_PHY_RESET, 0);
! 	udelay(100);
  	gpio_set_value(HDK7105_PIO_PHY_RESET, 1);
  
  	return 1;
--- 199,205 ----
  static int hdk7105_phy_reset(void *bus)
  {
  	gpio_set_value(HDK7105_PIO_PHY_RESET, 0);
! 	mdelay(100);
  	gpio_set_value(HDK7105_PIO_PHY_RESET, 1);
  
  	return 1;
*************** static struct platform_device hdk7105_no
*** 210,217 ****
  struct stm_nand_bank_data hdk7105_nand_flash = {
  	.csn		= 1,
  	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
! 	.nr_partitions	= 2,
  	.partitions	= (struct mtd_partition []) {
  		{
  			.name	= "NAND Flash 1",
  			.offset	= 0,
--- 249,259 ----
  struct stm_nand_bank_data hdk7105_nand_flash = {
  	.csn		= 1,
  	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
! //	.nr_partitions	= 2,
! 	.nr_partitions	= 7,
  	.partitions	= (struct mtd_partition []) {
+ 
+ #if 0
  		{
  			.name	= "NAND Flash 1",
  			.offset	= 0,
*************** struct stm_nand_bank_data hdk7105_nand_f
*** 221,226 ****
--- 263,311 ----
  			.offset = MTDPART_OFS_NXTBLK,
  			.size	= MTDPART_SIZ_FULL
  		},
+ #endif
+     {
+ 		.name	= "uboot",
+ 		.offset	= 0,
+ 		.size 	= 0x00100000 //1M  //uboot boot mode
+ 	},
+ 	{
+ 		.name	= "Spark kernel",
+ 		.offset	= 0x00100000,
+ 		.size 	= 0x00a00000 //10M
+ 	},
+ 
+ 	{
+         .name = "Reserve0",
+         .offset = 0x00b00000,
+ 		.size = 0x00700000, //7M
+ 	},
+ 
+     {
+         .name = "Reserve1",
+ 		.offset = 0x01200000,
+ 		.size = 0x00200000, //2M
+     },
+ 
+     {
+ 		.name	= "Spark Userfs",
+ 		.offset	= 0x01400000,
+ 		.size	= 0x16c00000  //364M
+ 	},
+ 
+     {
+ 		.name	= "E2 kernel",
+ 		.offset	= 0x18000000,
+ 		.size	= 0x00800000 //8M
+ 	},
+ 
+     {
+ 		.name	= "E2 Userfs",
+ 		.offset	= 0x18800000,
+ 		.size	= 0x07700000 //119M	cc changed reserved 1024KB for u-boot bbt
+ 	},
+ 
+ 
  	},
  	.timing_data		= &(struct stm_nand_timing_data) {
  		.sig_setup	= 50,		/* times in ns */
*************** struct stm_nand_bank_data hdk7105_nand_f
*** 235,252 ****
  	},
  };
  
  /* Serial Flash */
  static struct spi_board_info hdk7105_serial_flash = {
  	.modalias       = "m25p80",
  	.bus_num        = 0,
  	.chip_select    = stm_gpio(2, 4),
! 	.max_speed_hz   = 7000000,
  	.mode           = SPI_MODE_3,
  	.platform_data  = &(struct flash_platform_data) {
  		.name = "m25p80",
  		.type = "m25p32",
  		.nr_parts	= 2,
  		.parts = (struct mtd_partition []) {
  			{
  				.name = "Serial Flash 1",
  				.size = 0x00080000,
--- 320,351 ----
  	},
  };
  
+ 
  /* Serial Flash */
  static struct spi_board_info hdk7105_serial_flash = {
  	.modalias       = "m25p80",
  	.bus_num        = 0,
  	.chip_select    = stm_gpio(2, 4),
! 	.max_speed_hz   = 500000,
  	.mode           = SPI_MODE_3,
  	.platform_data  = &(struct flash_platform_data) {
  		.name = "m25p80",
+ 		#ifdef SPI_FLASH_BOOT
+ 		//.type = "en25f16",
+ 		.nr_parts	= 1,
+ 		#else
  		.type = "m25p32",
  		.nr_parts	= 2,
+ 		#endif
  		.parts = (struct mtd_partition []) {
+ 			#ifdef SPI_FLASH_BOOT
+ 			{
+ 				.name = "uboot",
+ 				.size = 0x00100000,
+ 				.offset = 0,
+ 			},
+ 			#else
+ 
  			{
  				.name = "Serial Flash 1",
  				.size = 0x00080000,
*************** static struct spi_board_info hdk7105_ser
*** 256,271 ****
  				.size = MTDPART_SIZ_FULL,
  				.offset = MTDPART_OFS_NXTBLK,
  			},
  		},
  	},
  };
  
  static struct platform_device *hdk7105_devices[] __initdata = {
! 	&hdk7105_leds,
  	&hdk7105_front_panel,
! 	&hdk7105_nor_flash,
  };
  
  static int __init hdk7105_device_init(void)
  {
  	struct sysconf_field *sc;
--- 355,397 ----
  				.size = MTDPART_SIZ_FULL,
  				.offset = MTDPART_OFS_NXTBLK,
  			},
+ 			#endif
  		},
  	},
  };
  
  static struct platform_device *hdk7105_devices[] __initdata = {
! 	//&hdk7105_leds,
  	&hdk7105_front_panel,
! 	//&hdk7105_nor_flash,
  };
  
+ void hdk7105_unconfigure_ssc_i2c(void)
+ {
+     stx7105_unconfigure_ssc_i2c(1, &(struct stx7105_ssc_config) {
+                     .routing.ssc2.sclk = stx7105_ssc1_sclk_pio2_5,
+                     .routing.ssc2.mtsr = stx7105_ssc1_mtsr_pio2_6, });
+ }
+ 
+ EXPORT_SYMBOL(hdk7105_unconfigure_ssc_i2c);
+ 
+ void hdk7105_configure_ssc_spi(void)
+ {
+ 	stx7105_configure_ssc_spi(4, &(struct stx7105_ssc_config) {
+ 			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
+ 			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6,
+ 			.routing.ssc1.mrst = stx7105_ssc1_mrst_pio2_7});
+ }
+ 
+ EXPORT_SYMBOL(hdk7105_configure_ssc_spi);
+ 
+ void hdk7105_spi_register(void)
+ {
+ 	spi_register_board_info(&hdk7105_serial_flash, 1);
+ }
+ 
+ EXPORT_SYMBOL(hdk7105_spi_register);
+ 
  static int __init hdk7105_device_init(void)
  {
  	struct sysconf_field *sc;
*************** static int __init hdk7105_device_init(vo
*** 296,302 ****
--- 422,432 ----
  		/* NOR mapped to EMIB, with physical offset of 0x06000000! */
  		nor_bank_base = emi_bank_base(1);
  		nor_bank_size = emi_bank_base(2) - nor_bank_base;
+ 		#ifdef SPI_FLASH_BOOT
+ 		hdk7105_nand_flash.csn = 0;
+ 		#else
  		hdk7105_nand_flash.csn = 2;
+ 		#endif
  		break;
  	default:
  		BUG();
*************** static int __init hdk7105_device_init(vo
*** 311,317 ****
  	/*     - update resource parameters */
  	hdk7105_nor_flash.resource[0].start += nor_bank_base;
  	hdk7105_nor_flash.resource[0].end += nor_bank_base;
! 
  	/* Setup the PCI_SERR# PIO */
  	if (gpio_request(HDK7105_PIO_PCI_SERR, "PCI_SERR#") == 0) {
  		gpio_direction_input(HDK7105_PIO_PCI_SERR);
--- 441,447 ----
  	/*     - update resource parameters */
  	hdk7105_nor_flash.resource[0].start += nor_bank_base;
  	hdk7105_nor_flash.resource[0].end += nor_bank_base;
! 	#if 0
  	/* Setup the PCI_SERR# PIO */
  	if (gpio_request(HDK7105_PIO_PCI_SERR, "PCI_SERR#") == 0) {
  		gpio_direction_input(HDK7105_PIO_PCI_SERR);
*************** static int __init hdk7105_device_init(vo
*** 322,333 ****
--- 452,466 ----
  		printk(KERN_WARNING "hdk7105: Failed to claim PCI SERR PIO!\n");
  	}
  	stx7105_configure_pci(&hdk7105_pci_config);
+ 	#endif  /* 0 */
  
  	stx7105_configure_sata(0);
  
+ 	#if 0
  	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
  			.out0 = stx7105_pwm_out0_pio13_0,
  			.out1 = stx7105_pwm_out1_disabled, });
+ 	#endif  /* 0 */
  
  	/* Set SPI Boot pads as inputs to avoid contention with SSC1 */
  	gpio_request(stm_gpio(15, 0), "SPI Boot CLK");
*************** static int __init hdk7105_device_init(vo
*** 353,362 ****
--- 486,500 ----
  			.routing.ssc0.sclk = stx7105_ssc0_sclk_pio2_2,
  			.routing.ssc0.mtsr = stx7105_ssc0_mtsr_pio2_3, });
  	/* SPI - SerialFLASH */
+ 	#if 0
  	stx7105_configure_ssc_spi(1, &(struct stx7105_ssc_config) {
  			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
  			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6,
  			.routing.ssc1.mrst = stx7105_ssc1_mrst_pio2_7});
+ 	#endif  /* 0 */
+ 		stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
+ 				.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
+ 				.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
  	/* I2C_xxxC - JN1 (NIM), JN3, UT1 (CI chip), US2 (EEPROM) */
  	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
  			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
*************** static int __init hdk7105_device_init(vo
*** 369,381 ****
  	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
  			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
  			.pwr_enabled = 1,
! 			.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
! 			.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
  	stx7105_configure_usb(1, &(struct stx7105_usb_config) {
  			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
  			.pwr_enabled = 1,
! 			.routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
! 			.routing.usb1.pwr = stx7105_usb1_pwr_pio4_7, });
  
  	gpio_request(HDK7105_PIO_PHY_RESET, "eth_phy_reset");
  	gpio_direction_output(HDK7105_PIO_PHY_RESET, 1);
--- 507,519 ----
  	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
  			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
  			.pwr_enabled = 1,
! 			.routing.usb0.ovrcur = stx7105_usb1_ovrcur_pio4_6,
! 			.routing.usb0.pwr = stx7105_usb1_pwr_pio4_7, });
  	stx7105_configure_usb(1, &(struct stx7105_usb_config) {
  			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
  			.pwr_enabled = 1,
! 			.routing.usb1.ovrcur = stx7105_usb0_ovrcur_pio4_4,
! 			.routing.usb1.pwr = stx7105_usb0_pwr_pio4_5, });
  
  	gpio_request(HDK7105_PIO_PHY_RESET, "eth_phy_reset");
  	gpio_direction_output(HDK7105_PIO_PHY_RESET, 1);
*************** static int __init hdk7105_device_init(vo
*** 405,412 ****
  	 * since NAND MTD has no concept of write-protect, we permanently
  	 * disable WP.
  	 */
! 	gpio_request(HDK7105_GPIO_FLASH_WP, "FLASH_WP");
! 	gpio_direction_output(HDK7105_GPIO_FLASH_WP, 1);
  
  	stx7105_configure_nand(&(struct stm_nand_config) {
  			.driver = stm_nand_flex,
--- 543,550 ----
  	 * since NAND MTD has no concept of write-protect, we permanently
  	 * disable WP.
  	 */
! 	//gpio_request(HDK7105_GPIO_FLASH_WP, "FLASH_WP");
! 	//gpio_direction_output(HDK7105_GPIO_FLASH_WP, 1);
  
  	stx7105_configure_nand(&(struct stm_nand_config) {
  			.driver = stm_nand_flex,

diff -crp linux-sh4-2.6.32.59_stm24_0211/arch/sh/kernel/setup.c linux-sh4-2.6.32.59_stm24_0211/arch/sh/kernel/setup.c
*** linux-sh4-2.6.32.59_stm24_0211/arch/sh/kernel/setup.c	2012-09-14 12:37:42.000000000 +0200
--- linux-sh4-2.6.32.59_stm24_0211/arch/sh/kernel/setup.c	2012-09-14 13:22:11.000000000 +0200
*************** void __init setup_arch(char **cmdline_p)
*** 389,394 ****
--- 389,418 ----
  #endif
  #endif
  
+ 	{
+ 		/* spider: remove bigphysarea allocation from command line */
+ 		int i;
+ 		int command_line_len = strlen(command_line);
+ 
+ 		for(i = 0; i < (command_line_len-11); i++)
+ 		{
+ 			if(!strncmp(command_line + i + 1, "bigphysarea", 11))
+ 			{
+ 				// search for next pos
+ 				int k;
+ 				int pos=command_line_len;
+ 				for(k=i+1; k<command_line_len; k++)
+ 					if(command_line[k]==' ') {
+ 						pos=k;
+ 						break;
+ 					}
+ 				memmove(command_line+i, command_line+pos, command_line_len-pos);
+ 				memset(&command_line[command_line_len-(pos-i)], '\0', pos-i);
+ 				break;
+ 			}
+ 		}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

 --- a/init/do_mounts.c	2014-01-13 14:29:53.536453245 +0800
+++ b/init/do_mounts.c	2014-01-13 14:29:15.736371912 +0800
@@ -365,7 +365,7 @@
 void __init prepare_namespace(void)
 {
 	int is_floppy;
-
+	root_delay=10;
 	if (root_delay) {
 		printk(KERN_INFO "Waiting %dsec before mounting root device...\n",
 		       root_delay);

diff -Naur a/arch/sh/boards/Kconfig org/arch/sh/boards/Kconfig
--- a/arch/sh/boards/Kconfig	2014-01-12 18:14:22.000000000 +0800
+++ org/arch/sh/boards/Kconfig	2013-07-21 01:23:03.000000000 +0800
@@ -763,6 +763,18 @@
 	  STMicroelectronics STx7108 Validation Board (product code:
 	  STi7108-MBOARD, ST board ID: mb837).
 
+config SH_ST_PDK7105
+    bool "PDK7105-SDK : STi7105 SDK Reference board"
+    depends on CPU_SUBTYPE_STX7105
+    select SYS_SUPPORTS_PCI
+    select SH_ST_SYNOPSYS_PCI if PCI
+    default n
+    help
+    Select PDK7105-SDK if configuring for an
+    STMicroelectronics STi7105 SDK Reference Board.
+
+
+
 config SH_ST_MB839
 	bool "mb839: STi7105 Reference Board"
 	depends on CPU_SUBTYPE_STX7105
diff -Naur a/arch/sh/boards/mach-pdk7105/Makefile b/arch/sh/boards/mach-pdk7105/Makefile
--- a/arch/sh/boards/mach-pdk7105/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ b/arch/sh/boards/mach-pdk7105/Makefile	2013-07-21 01:17:57.000000000 +0800
@@ -0,0 +1,6 @@
+#
+# Makefile for STMicroelectronics PDK7105-SDK board
+#
+
+obj-y := setup.o
+
diff -Naur a/arch/sh/boards/mach-pdk7105/setup.c b/arch/sh/boards/mach-pdk7105/setup.c
--- a/arch/sh/boards/mach-pdk7105/setup.c	1970-01-01 08:00:00.000000000 +0800
+++ b/arch/sh/boards/mach-pdk7105/setup.c	2013-10-21 17:53:16.388013824 +0800
@@ -0,0 +1,598 @@
+/*
+ * arch/sh/boards/st/pdk7105/setup.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics PDK7105-SDK support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/platform.h>
+#include <linux/stm/stx7105.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/sysconf.h>
+#include <linux/delay.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/nand.h>
+#include <linux/stm/nand.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_gpio.h>
+#include <linux/bpa2.h>
+#include <linux/spi/flash.h>
+#include <linux/irq.h>
+#include <asm/processor.h>
+#include <linux/phy.h>
+#include <linux/gpio_keys.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <asm/io.h>
+
+/*
+ * Flash setup depends on whether system is configured as boot-from-NOR
+ * (default) or boot-from-NAND.
+ *
+ * Jumper settings (board v1.2-011):
+ *
+ * boot-from-      |   NOR                     NAND
+ * ---------------------------------------------------------------
+ * JE2 (CS routing) |  0 (EMIA->NOR_CS)        1 (EMIA->NAND_CS)
+ *                  |    (EMIB->NOR_CS)          (EMIB->NOR_CS)
+ *                  |    (EMIC->NAND_CS)         (EMIC->NOR_CS)
+ * JE3 (data width) |  0 (16bit)               1 (8bit)
+ * JE5 (mode 15)    |  0 (boot NOR)            1 (boot NAND)
+ * ---------------------------------------------------------------
+ *
+ */
+#define PDK7105_PIO_PHY_RESET stm_gpio(15, 5)
+#define PDK7105_PIO_FLASH_WP stm_gpio(6, 4)
+
+static int ascs[2] __initdata = { 2, 3 };
+//static int ascs[3] __initdata = {1, 2, 3 };
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (116mb) 
+0x47600000 - 0x483FFFFF - bigphys ( 32mb (0x02000000))
+0x48400000 - 0x4FFFFFFF - lmi_io  ( 100mb (0x06400000))
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+  	    .name  = "bigphysarea",
+ 	    .start = 0x49400000,
+ 	    .size  = 0x01800000, /* 24 Mb */
+  	    .flags = 0,
+  	    .aka   = NULL
+    }, 
+    {
+  	    .name  = "LMI_IO",
+ 	    .start = 0x4AC00000,
+ 	    .size  = 0x05400000, /* 84 Mb */
+  	    .flags = 0,
+  	    .aka   = LMI_IO_partalias
+    }, 
+ };
+
+
+
+/*
+0x40800000 - 0x47FFFFFF - linux   (120mb) 
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+
+   
+ 	   
+
+ 	   
+ 	    
+ 	   
+   
+   
+ 	   
+ 	   
+ 	    
+ 	    
+ 	
+  
+ 
+
+ 
+ 
+
+static void __init pdk7105_setup(char** cmdline_p)
+{
+	printk("STMicroelectronics PDK7105-SDK board initialisation\n\n");
+
+	stx7105_early_device_init();
+
+    stx7105_configure_asc(2, &(struct stx7105_asc_config) {
+            .routing.asc2 = stx7105_asc2_pio4,
+            .hw_flow_control = 1,
+            .is_console = 1, });
+//    stx7105_configure_asc(3, &(struct stx7105_asc_config) {
+//            .hw_flow_control = 1,
+//            .is_console = 0, });
+bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+static struct platform_device pdk7105_leds = {
+	.name = "leds-gpio",
+	.id = 0,
+	.dev.platform_data = &(struct gpio_led_platform_data) {
+		.num_leds = 2,
+		.leds = (struct gpio_led[]) {
+			{
+				.name = "LD5",
+				.default_trigger = "heartbeat",
+				.gpio = stm_gpio(2, 4), //stpio_to_gpio(2, 4),
+			},
+			{
+				.name = "LD6",
+				.gpio = stm_gpio(2, 3), //stpio_to_gpio(2, 3),
+			},
+		},
+	},
+};
+
+static struct stpio_pin *phy_reset_pin;
+
+static int pdk7105_phy_reset(void* bus)
+{
+#if 1 
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 1);
+#else
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 0);
+	udelay(100);
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 1); 
+#endif
+	return 1;
+}
+
+static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
+    .bus_id = 0,
+    .phy_reset = pdk7105_phy_reset,
+    .phy_mask = 0,
+};
+
+/*
+static struct plat_stmmacphy_data phy_private_data = {
+	.bus_id = 0,
+	.phy_addr = -1,
+	.phy_mask = 0,
+	.interface = PHY_INTERFACE_MODE_MII,
+	.phy_reset = &pdk7105_phy_reset,
+};
+
+static struct platform_device pdk7105_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.name	= "phyirq",
+			.start	= -1, //FIXME, should be ILC_EXT_IRQ(6), 
+			.end	= -1,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &phy_private_data,
+	}
+};
+*/
+#if 0
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00200000,
+		.offset = 0x00040000,
+	}, {
+		.name = "Root FS",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x00240000,
+	}
+};
+#else
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x000c0000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00300000,
+		.offset = 0x000c0000,
+	}, {
+		.name = "Root FS",
+		.size = 0x03c40000,
+		.offset = 0x003c0000,
+	}
+};
+#endif
+
+static struct physmap_flash_data pdk7105_physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+
+static struct platform_device pdk7105_physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 128*1024*1024 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &pdk7105_physmap_flash_data,
+	},
+};
+
+/* Configuration for Serial Flash */
+static struct mtd_partition serialflash_partitions[] = {
+	{
+		.name = "SFLASH_1",
+		.size = 0x00080000,
+		.offset = 0,
+	}, {
+		.name = "SFLASH_2",
+		.size = MTDPART_SIZ_FULL,
+		.offset = MTDPART_OFS_NXTBLK,
+	},
+};
+
+static struct flash_platform_data serialflash_data = {
+	.name = "m25p80",
+	.parts = serialflash_partitions,
+	.nr_parts = ARRAY_SIZE(serialflash_partitions),
+	.type = "m25p64",
+};
+
+static struct spi_board_info spi_serialflash[] =  {
+	{
+		.modalias       = "m25p80",
+		.bus_num        = 8,
+		.chip_select    = stm_gpio(15, 2), //spi_set_cs(15, 2),
+		.max_speed_hz   = 500000,
+		.platform_data  = &serialflash_data,
+		.mode           = SPI_MODE_3,
+	},
+};
+
+
+static struct platform_device spi_pio_device = {
+    .name           = "spi_gpio",
+    .id             = 8,
+    .num_resources  = 0,
+    .dev            = {
+        .platform_data = &(struct spi_gpio_platform_data) {
+            .sck = stm_gpio(15, 0),
+            .mosi = stm_gpio(15, 1),
+            .miso = stm_gpio(15, 3),
+            .num_chipselect = 1,
+        },
+    },
+};
+
+
+/* Configuration for NAND Flash */
+static struct mtd_partition nand_parts[] = {
+	{
+		.name	= "NAND kernel",
+		.offset	= 0x00100000,
+		.size 	= 0x00400000
+	},{
+		.name	= "NAND Root",
+		.offset	= 0x00500000,
+		//.size	= 150M
+		.size	= 0x09600000
+	},{
+		.name	= "NAND Push",
+		.offset	= 0x9b00000,
+		//.size	= 100M
+		.size	= 0x06400000
+	},
+
+#if 0
+0--1M   1M  Reserved
+1--5M  4M KERNEL
+5--155M 150M  FS
+155M-255M 101M push update FS
+
+	{
+		.name	= "NAND kernel",
+		.offset	= 0x00100000,
+		.size 	= 0x00400000
+	},{
+		.name	= "NAND root",
+		.offset	= 0x00500000,
+		//.size	= 0x08000000
+		.size	= 0x08000000
+	},{
+		.name	= "NAND home",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
+	},
+
+	{
+		.name   = "NAND root",
+		.offset = 0,
+		.size   = 0x00800000
+	}, {
+		.name   = "NAND home",
+		.offset = MTDPART_OFS_APPEND,
+		.size   = MTDPART_SIZ_FULL
+	},
+#endif
+};
+
+static struct stm_nand_bank_data nand_bank_data = {
+    .csn                    = 2,
+    .nr_partitions      = ARRAY_SIZE(nand_parts),
+    .partitions     = nand_parts,
+	.emi_withinbankoffset   = 0,
+
+	.timing_data = &(struct stm_nand_timing_data) {
+		.sig_setup      = 50,           // times in ns
+		.sig_hold       = 50,
+		.CE_deassert    = 0,
+		.WE_to_RBn      = 100,
+		.wr_on          = 10,
+		.wr_off         = 40,
+		.rd_on          = 10,
+		.rd_off         = 40,
+		.chip_delay     = 50,           // in us
+	},
+	//.flex_rbn_connected     = 0,
+
+};
+
+
+/* Platform data for STM_NAND_EMI/FLEX/AFM. (bank# may be updated later) */
+/*static struct platform_device nand_device =
+STM_NAND_DEVICE("stm-nand-flex", 2, &nand_config,
+		nand_parts, ARRAY_SIZE(nand_parts), NAND_USE_FLASH_BBT);
+*/
+
+static struct platform_device nand_device = {
+        .name       = "stm-nand-flex",
+        .dev.platform_data = &(struct stm_plat_nand_flex_data){
+        .nr_banks   = 2,
+        .banks      = &nand_bank_data,
+        //.emi_rbn_gpio   = -1,
+        //.flex_rbn_gpio = 0,
+        },
+};
+
+
+static struct platform_device *pdk7105_devices[] __initdata = {
+//	&pdk7105_leds,
+//	&pdk7105_phy_device,
+	&spi_pio_device,
+};
+
+/* PCI configuration */
+static struct stm_plat_pci_config  pci_config = {
+	.pci_irq = {
+        [0] = PCI_PIN_DEFAULT,
+        [1] = PCI_PIN_UNUSED,
+        [2] = PCI_PIN_UNUSED,
+        [3] = PCI_PIN_UNUSED
+    },
+    .serr_irq = PCI_PIN_DEFAULT, /* J32-F fitted */
+    .idsel_lo = 30,
+    .idsel_hi = 30,
+    .req_gnt = {
+        [0] = PCI_PIN_DEFAULT,
+        [1] = PCI_PIN_UNUSED,
+        [2] = PCI_PIN_UNUSED,
+        [3] = PCI_PIN_UNUSED
+    },
+    .pci_clk = 33333333,
+    .pci_reset_gpio = stm_gpio(15, 7)
+};
+
+int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
+{
+	/* We can use the standard function on this board */
+	return  stx7105_pcibios_map_platform_irq(&pci_config, pin);
+}
+
+static int __init device_init(void)
+{
+	u32 bank1_start;
+	u32 bank2_start;
+	struct sysconf_field *sc;
+	u32 boot_mode,i;
+
+	bank1_start = emi_bank_base(0);
+	bank2_start = emi_bank_base(1);
+
+	/* Configure FLASH according to boot device mode pins */
+	sc = sysconf_claim(SYS_STA, 1, 15, 16, "boot_mode");
+	boot_mode = sysconf_read(sc);
+	if (boot_mode == 0x0)
+	{
+		/* Default configuration */
+		printk("Configuring FLASH for boot-from-NOR\n");
+	}
+	else if (boot_mode == 0x1) 
+	{
+		/* Swap NOR/NAND banks */
+		printk("Configuring FLASH for boot-from-NAND\n");
+		//printk("Boot nand: bank1_start=0x%x, bank2_start0x=%x\n",bank1_start,bank2_start);
+		
+		pdk7105_physmap_flash.resource[0].start = bank1_start;
+		pdk7105_physmap_flash.resource[0].end = bank2_start - 1;
+		nand_device.id = 0;
+	}
+	else
+	{
+		printk("Configuring FLASH for boot-from-spi: boot_mode=%d\n",boot_mode);
+		bank1_start = emi_bank_base(1);
+		bank2_start = emi_bank_base(2);
+		//printk("Spi boot:bank1_start=0x%x, bank2_start0x=%x\n",bank1_start,bank2_start);
+		pdk7105_physmap_flash.resource[0].start = bank1_start;
+		pdk7105_physmap_flash.resource[0].end = bank2_start - 1;
+		//nand_device.id =2; /*If your board is 1.0version,set id to 2*/
+		nand_device.id = 0; /*If your board is 2.0version,set id to 0*/
+	}
+	
+	stx7105_configure_pci(&pci_config);
+	stx7105_configure_sata(0);
+	
+    //stx7105_configure_pwm(&pwm_private_info);
+	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
+            .out0 = stx7105_pwm_out0_pio13_0,
+            .out1 = stx7105_pwm_out1_disabled, });
+
+    //stx7105_configure_ssc(&ssc_private_info);
+    stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
+            .routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
+            .routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
+    stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
+            .routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
+            .routing.ssc2.mtsr = stx7105_ssc2_mtsr_pio3_5, });
+    stx7105_configure_ssc_i2c(3, &(struct stx7105_ssc_config) {
+            .routing.ssc3.sclk = stx7105_ssc3_sclk_pio3_6,
+            .routing.ssc3.mtsr = stx7105_ssc3_mtsr_pio3_7, });
+
+	/*
+	 * Note that USB port configuration depends on jumper
+	 * settings:
+	 *		  PORT 0  SW		PORT 1	SW
+	 *		+----------------------------------------
+	 * OC	normal	|  4[4]	J5A 2-3		 4[6]	J10A 2-3
+	 *	alt	| 12[5]	J5A 1-2		14[6]	J10A 1-2
+	 * PWR	normal	|  4[5]	J5B 2-3		 4[7]	J10B 2-3
+	 *	alt	| 12[6]	J5B 1-2		14[7]	J10B 1-2
+	 */
+
+	//stx7105_configure_usb(0, &usb_init[0]);
+	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
+            .ovrcur_mode = stx7105_usb_ovrcur_active_low,
+            .pwr_enabled = 1,
+            .routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
+            .routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
+    /*stx7105_configure_usb(1, &(struct stx7105_usb_config) {
+            .ovrcur_mode = stx7105_usb_ovrcur_active_low,
+            .pwr_enabled = 1,
+            .routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
+            .routing.usb1.pwr = stx7105_usb1_pwr_pio4_7, });*/
+
+
+	//phy_reset_pin = stpio_request_set_pin(15, 5, "eth_phy_reset",
+	//				      STPIO_OUT, 1);
+    gpio_request(PDK7105_PIO_PHY_RESET, "eth_phy_reset");
+    gpio_direction_output(PDK7105_PIO_PHY_RESET, 1);
+
+					      
+   
+    /* gongjia add set pio15_5 to 1 smit*/
+	//stpio_set_pin(phy_reset_pin, 0);
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 0);
+	for(i=0;i<5;i++)
+	{
+	    udelay(20000);
+	}	
+	//stpio_set_pin(phy_reset_pin, 1);
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 1);
+	
+	//stx7105_configure_ethernet(0, 0, 0, 0, 0, 0);
+    //stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config) {
+    //        .mode = stx7105_ethernet_mode_mii,
+    //        .ext_clk = 0,
+    //        .phy_bus = 0, });
+    
+    stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config) {
+            .mode = stx7105_ethernet_mode_mii,
+            .ext_clk = 1,
+            .phy_bus = 0,
+            .phy_addr = -1,
+            .mdio_bus_data = &stmmac_mdio_bus,
+            });
+
+
+#if defined(CONFIG_LIRC_SUPPORT) 
+	//stx7105_configure_lirc(&lirc_scd);
+    stx7105_configure_lirc(&(struct stx7105_lirc_config) {
+            .rx_mode = stx7105_lirc_rx_mode_ir,
+            .tx_enabled = 1,
+            .tx_od_enabled = 1, });
+#endif 
+	//stx7105_configure_audio_pins(3, 1, 1);
+
+	/*
+	 * FLASH_WP is shared by NOR and NAND.  However, since MTD NAND has no
+	 * concept of WP/VPP, we must permanently enable it
+	 */
+	//stpio_request_set_pin(6, 4, "FLASH_WP", STPIO_OUT, 1);
+    gpio_request(PDK7105_PIO_FLASH_WP, "FLASH_WP");
+    gpio_direction_output(PDK7105_PIO_FLASH_WP, 1);
+      //printk("device_init:###############\n");
+
+
+	//stx7105_configure_nand(&nand_device);
+#ifdef NAND_USES_FLEX
+    stx7105_configure_nand_flex(1, &nand_bank_data, 1);
+#endif
+
+
+	spi_register_board_info(spi_serialflash, ARRAY_SIZE(spi_serialflash));
+ 
+	return platform_add_devices(pdk7105_devices, ARRAY_SIZE(pdk7105_devices));
+}
+arch_initcall(device_init);
+
+static void __iomem *pdk7105_ioport_map(unsigned long port, unsigned int size)
+{
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init pdk7105_init_irq(void)
+{
+#ifndef CONFIG_SH_ST_MB705
+	/* Configure STEM interrupts as active low. */
+	set_irq_type(ILC_EXT_IRQ(1), IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(ILC_EXT_IRQ(2), IRQ_TYPE_LEVEL_LOW);
+#endif
+}
+
+struct sh_machine_vector mv_pdk7105 __initmv = {
+	.mv_name		= "pdk7105",
+	.mv_setup		= pdk7105_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= pdk7105_init_irq,
+	.mv_ioport_map		= pdk7105_ioport_map,
+};
+
diff -Naur a/arch/sh/boards/mach-pdk7105/setup.c.bk b/arch/sh/boards/mach-pdk7105/setup.c.bk
--- a/arch/sh/boards/mach-pdk7105/setup.c.bk	1970-01-01 08:00:00.000000000 +0800
+++ b/arch/sh/boards/mach-pdk7105/setup.c.bk	2013-07-21 01:34:11.000000000 +0800
@@ -0,0 +1,526 @@
+/*
+ * arch/sh/boards/st/pdk7105/setup.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics PDK7105-SDK support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/platform.h>
+#include <linux/stm/stx7105.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/sysconf.h>
+#include <linux/delay.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/nand.h>
+#include <linux/stm/nand.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_gpio.h>
+#include <linux/spi/flash.h>
+#include <linux/irq.h>
+#include <asm/processor.h>
+#include <linux/phy.h>
+#include <linux/gpio_keys.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <asm/io.h>
+
+/*
+ * Flash setup depends on whether system is configured as boot-from-NOR
+ * (default) or boot-from-NAND.
+ *
+ * Jumper settings (board v1.2-011):
+ *
+ * boot-from-      |   NOR                     NAND
+ * ---------------------------------------------------------------
+ * JE2 (CS routing) |  0 (EMIA->NOR_CS)        1 (EMIA->NAND_CS)
+ *                  |    (EMIB->NOR_CS)          (EMIB->NOR_CS)
+ *                  |    (EMIC->NAND_CS)         (EMIC->NOR_CS)
+ * JE3 (data width) |  0 (16bit)               1 (8bit)
+ * JE5 (mode 15)    |  0 (boot NOR)            1 (boot NAND)
+ * ---------------------------------------------------------------
+ *
+ */
+#define PDK7105_PIO_PHY_RESET stm_gpio(15, 5)
+#define PDK7105_PIO_FLASH_WP stm_gpio(6, 4)
+
+static int ascs[2] __initdata = { 2, 3 };
+//static int ascs[3] __initdata = {1, 2, 3 };
+
+static void __init pdk7105_setup(char** cmdline_p)
+{
+	printk("STMicroelectronics PDK7105-SDK board initialisation\n\n");
+
+	stx7105_early_device_init();
+
+    stx7105_configure_asc(2, &(struct stx7105_asc_config) {
+            .routing.asc2 = stx7105_asc2_pio4,
+            .hw_flow_control = 1,
+            .is_console = 1, });
+//    stx7105_configure_asc(3, &(struct stx7105_asc_config) {
+//            .hw_flow_control = 1,
+//            .is_console = 0, });
+}
+
+static struct platform_device pdk7105_leds = {
+	.name = "leds-gpio",
+	.id = 0,
+	.dev.platform_data = &(struct gpio_led_platform_data) {
+		.num_leds = 2,
+		.leds = (struct gpio_led[]) {
+			{
+				.name = "LD5",
+				.default_trigger = "heartbeat",
+				.gpio = stm_gpio(2, 4), //stpio_to_gpio(2, 4),
+			},
+			{
+				.name = "LD6",
+				.gpio = stm_gpio(2, 3), //stpio_to_gpio(2, 3),
+			},
+		},
+	},
+};
+
+static struct stpio_pin *phy_reset_pin;
+
+static int pdk7105_phy_reset(void* bus)
+{
+#if 1 
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 1);
+#else
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 0);
+	udelay(100);
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 1); 
+#endif
+	return 1;
+}
+
+static struct plat_stmmacphy_data phy_private_data = {
+	/* Micrel */
+	.bus_id = 0,
+	.phy_addr = -1,
+	.phy_mask = 0,
+	.interface = PHY_INTERFACE_MODE_MII,
+	.phy_reset = &pdk7105_phy_reset,
+};
+
+static struct platform_device pdk7105_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.name	= "phyirq",
+			.start	= -1,/*FIXME, should be ILC_EXT_IRQ(6), */
+			.end	= -1,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &phy_private_data,
+	}
+};
+
+#if 0
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x00040000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00200000,
+		.offset = 0x00040000,
+	}, {
+		.name = "Root FS",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x00240000,
+	}
+};
+#else
+static struct mtd_partition mtd_parts_table[3] = {
+	{
+		.name = "Boot firmware",
+		.size = 0x000c0000,
+		.offset = 0x00000000,
+	}, {
+		.name = "Kernel",
+		.size = 0x00300000,
+		.offset = 0x000c0000,
+	}, {
+		.name = "Root FS",
+		.size = 0x03c40000,
+		.offset = 0x003c0000,
+	}
+};
+#endif
+
+static struct physmap_flash_data pdk7105_physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+};
+
+static struct platform_device pdk7105_physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 128*1024*1024 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &pdk7105_physmap_flash_data,
+	},
+};
+
+/* Configuration for Serial Flash */
+static struct mtd_partition serialflash_partitions[] = {
+	{
+		.name = "SFLASH_1",
+		.size = 0x00080000,
+		.offset = 0,
+	}, {
+		.name = "SFLASH_2",
+		.size = MTDPART_SIZ_FULL,
+		.offset = MTDPART_OFS_NXTBLK,
+	},
+};
+
+static struct flash_platform_data serialflash_data = {
+	.name = "m25p80",
+	.parts = serialflash_partitions,
+	.nr_parts = ARRAY_SIZE(serialflash_partitions),
+	.type = "m25p64",
+};
+
+static struct spi_board_info spi_serialflash[] =  {
+	{
+		.modalias       = "m25p80",
+		.bus_num        = 8,
+		.chip_select    = stm_gpio(15, 2), //spi_set_cs(15, 2),
+		.max_speed_hz   = 500000,
+		.platform_data  = &serialflash_data,
+		.mode           = SPI_MODE_3,
+	},
+};
+
+
+static struct platform_device spi_pio_device = {
+    .name           = "spi_gpio",
+    .id             = 8,
+    .num_resources  = 0,
+    .dev            = {
+        .platform_data = &(struct spi_gpio_platform_data) {
+            .sck = stm_gpio(15, 0),
+            .mosi = stm_gpio(15, 1),
+            .miso = stm_gpio(15, 3),
+            .num_chipselect = 1,
+        },
+    },
+};
+
+
+/* Configuration for NAND Flash */
+static struct mtd_partition nand_parts[] = {
+	{
+		.name	= "NAND kernel",
+		.offset	= 0x00100000,
+		.size 	= 0x00400000
+	},{
+		.name	= "NAND Root",
+		.offset	= 0x00500000,
+		//.size	= 150M
+		.size	= 0x09600000
+	},{
+		.name	= "NAND Push",
+		.offset	= 0x9b00000,
+		//.size	= 100M
+		.size	= 0x06400000
+	},
+
+#if 0
+0--1M   1M  Reserved
+1--5M  4M KERNEL
+5--155M 150M  FS
+155M-255M 101M push update FS
+
+	{
+		.name	= "NAND kernel",
+		.offset	= 0x00100000,
+		.size 	= 0x00400000
+	},{
+		.name	= "NAND root",
+		.offset	= 0x00500000,
+		//.size	= 0x08000000
+		.size	= 0x08000000
+	},{
+		.name	= "NAND home",
+		.offset	= MTDPART_OFS_APPEND,
+		.size	= MTDPART_SIZ_FULL
+	},
+
+	{
+		.name   = "NAND root",
+		.offset = 0,
+		.size   = 0x00800000
+	}, {
+		.name   = "NAND home",
+		.offset = MTDPART_OFS_APPEND,
+		.size   = MTDPART_SIZ_FULL
+	},
+#endif
+};
+
+static struct stm_nand_bank_data nand_bank_data = {
+    .csn                    = 2,
+    .nr_partitions      = ARRAY_SIZE(nand_parts),
+    .partitions     = nand_parts,
+	.emi_withinbankoffset   = 0,
+
+	.timing_data = &(struct stm_nand_timing_data) {
+		.sig_setup      = 50,           // times in ns
+		.sig_hold       = 50,
+		.CE_deassert    = 0,
+		.WE_to_RBn      = 100,
+		.wr_on          = 10,
+		.wr_off         = 40,
+		.rd_on          = 10,
+		.rd_off         = 40,
+		.chip_delay     = 50,           // in us
+	},
+	//.flex_rbn_connected     = 0,
+
+};
+
+
+/* Platform data for STM_NAND_EMI/FLEX/AFM. (bank# may be updated later) */
+/*static struct platform_device nand_device =
+STM_NAND_DEVICE("stm-nand-flex", 2, &nand_config,
+		nand_parts, ARRAY_SIZE(nand_parts), NAND_USE_FLASH_BBT);
+*/
+
+static struct platform_device nand_device = {
+        .name       = "stm-nand-flex",
+        .dev.platform_data = &(struct stm_plat_nand_flex_data){
+        .nr_banks   = 2,
+        .banks      = &nand_bank_data,
+        //.emi_rbn_gpio   = -1,
+        //.flex_rbn_gpio = 0,
+        },
+};
+
+
+static struct platform_device *pdk7105_devices[] __initdata = {
+//	&pdk7105_leds,
+	&pdk7105_phy_device,
+	&spi_pio_device,
+};
+
+/* PCI configuration */
+static struct stm_plat_pci_config  pci_config = {
+	.pci_irq = {
+        [0] = PCI_PIN_DEFAULT,
+        [1] = PCI_PIN_UNUSED,
+        [2] = PCI_PIN_UNUSED,
+        [3] = PCI_PIN_UNUSED
+    },
+    .serr_irq = PCI_PIN_DEFAULT, /* J32-F fitted */
+    .idsel_lo = 30,
+    .idsel_hi = 30,
+    .req_gnt = {
+        [0] = PCI_PIN_DEFAULT,
+        [1] = PCI_PIN_UNUSED,
+        [2] = PCI_PIN_UNUSED,
+        [3] = PCI_PIN_UNUSED
+    },
+    .pci_clk = 33333333,
+    .pci_reset_gpio = stm_gpio(15, 7)
+};
+
+int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
+{
+	/* We can use the standard function on this board */
+	return  stx7105_pcibios_map_platform_irq(&pci_config, pin);
+}
+
+static int __init device_init(void)
+{
+	u32 bank1_start;
+	u32 bank2_start;
+	struct sysconf_field *sc;
+	u32 boot_mode,i;
+
+	bank1_start = emi_bank_base(0);
+	bank2_start = emi_bank_base(1);
+
+	/* Configure FLASH according to boot device mode pins */
+	sc = sysconf_claim(SYS_STA, 1, 15, 16, "boot_mode");
+	boot_mode = sysconf_read(sc);
+	if (boot_mode == 0x0)
+	{
+		/* Default configuration */
+		printk("Configuring FLASH for boot-from-NOR\n");
+	}
+	else if (boot_mode == 0x1) 
+	{
+		/* Swap NOR/NAND banks */
+		printk("Configuring FLASH for boot-from-NAND\n");
+		//printk("Boot nand: bank1_start=0x%x, bank2_start0x=%x\n",bank1_start,bank2_start);
+		
+		pdk7105_physmap_flash.resource[0].start = bank1_start;
+		pdk7105_physmap_flash.resource[0].end = bank2_start - 1;
+		nand_device.id = 0;
+	}
+	else
+	{
+		printk("Configuring FLASH for boot-from-spi: boot_mode=%d\n",boot_mode);
+		bank1_start = emi_bank_base(1);
+		bank2_start = emi_bank_base(2);
+		//printk("Spi boot:bank1_start=0x%x, bank2_start0x=%x\n",bank1_start,bank2_start);
+		pdk7105_physmap_flash.resource[0].start = bank1_start;
+		pdk7105_physmap_flash.resource[0].end = bank2_start - 1;
+		//nand_device.id =2; /*If your board is 1.0version,set id to 2*/
+		nand_device.id = 0; /*If your board is 2.0version,set id to 0*/
+	}
+	
+	stx7105_configure_pci(&pci_config);
+	stx7105_configure_sata(0);
+	
+    //stx7105_configure_pwm(&pwm_private_info);
+	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
+            .out0 = stx7105_pwm_out0_pio13_0,
+            .out1 = stx7105_pwm_out1_disabled, });
+
+    //stx7105_configure_ssc(&ssc_private_info);
+    stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
+            .routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
+            .routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
+    stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
+            .routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
+            .routing.ssc2.mtsr = stx7105_ssc2_mtsr_pio3_5, });
+    stx7105_configure_ssc_i2c(3, &(struct stx7105_ssc_config) {
+            .routing.ssc3.sclk = stx7105_ssc3_sclk_pio3_6,
+            .routing.ssc3.mtsr = stx7105_ssc3_mtsr_pio3_7, });
+
+	/*
+	 * Note that USB port configuration depends on jumper
+	 * settings:
+	 *		  PORT 0  SW		PORT 1	SW
+	 *		+----------------------------------------
+	 * OC	normal	|  4[4]	J5A 2-3		 4[6]	J10A 2-3
+	 *	alt	| 12[5]	J5A 1-2		14[6]	J10A 1-2
+	 * PWR	normal	|  4[5]	J5B 2-3		 4[7]	J10B 2-3
+	 *	alt	| 12[6]	J5B 1-2		14[7]	J10B 1-2
+	 */
+
+	//stx7105_configure_usb(0, &usb_init[0]);
+	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
+            .ovrcur_mode = stx7105_usb_ovrcur_active_low,
+            .pwr_enabled = 1,
+            .routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
+            .routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
+    stx7105_configure_usb(1, &(struct stx7105_usb_config) {
+            .ovrcur_mode = stx7105_usb_ovrcur_active_low,
+            .pwr_enabled = 1,
+            .routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
+            .routing.usb1.pwr = stx7105_usb1_pwr_pio4_7, });
+
+
+	//phy_reset_pin = stpio_request_set_pin(15, 5, "eth_phy_reset",
+	//				      STPIO_OUT, 1);
+    gpio_request(PDK7105_PIO_PHY_RESET, "eth_phy_reset");
+    gpio_direction_output(PDK7105_PIO_PHY_RESET, 1);
+
+					      
+   
+    /* gongjia add set pio15_5 to 1 smit*/
+	//stpio_set_pin(phy_reset_pin, 0);
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 0);
+	for(i=0;i<5;i++)
+	{
+	    udelay(20000);
+	}	
+	//stpio_set_pin(phy_reset_pin, 1);
+    gpio_set_value(PDK7105_PIO_PHY_RESET, 1);
+	
+	//stx7105_configure_ethernet(0, 0, 0, 0, 0, 0);
+    stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config) {
+            .mode = stx7105_ethernet_mode_mii,
+            .ext_clk = 0,
+            .phy_bus = 0, });
+
+#if defined(CONFIG_LIRC_SUPPORT) 
+	//stx7105_configure_lirc(&lirc_scd);
+    stx7105_configure_lirc(&(struct stx7105_lirc_config) {
+            .rx_mode = stx7105_lirc_rx_mode_ir,
+            .tx_enabled = 1,
+            .tx_od_enabled = 1, });
+#endif 
+	//stx7105_configure_audio_pins(3, 1, 1);
+
+	/*
+	 * FLASH_WP is shared by NOR and NAND.  However, since MTD NAND has no
+	 * concept of WP/VPP, we must permanently enable it
+	 */
+	//stpio_request_set_pin(6, 4, "FLASH_WP", STPIO_OUT, 1);
+    gpio_request(PDK7105_PIO_FLASH_WP, "FLASH_WP");
+    gpio_direction_output(PDK7105_PIO_FLASH_WP, 1);
+      //printk("device_init:###############\n");
+
+
+	//stx7105_configure_nand(&nand_device);
+#ifdef NAND_USES_FLEX
+    stx7105_configure_nand_flex(1, &nand_bank_data, 1);
+#endif
+
+
+	//spi_register_board_info(spi_serialflash, ARRAY_SIZE(spi_serialflash));
+ 
+	return platform_add_devices(pdk7105_devices, ARRAY_SIZE(pdk7105_devices));
+}
+arch_initcall(device_init);
+
+static void __iomem *pdk7105_ioport_map(unsigned long port, unsigned int size)
+{
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init pdk7105_init_irq(void)
+{
+#ifndef CONFIG_SH_ST_MB705
+	/* Configure STEM interrupts as active low. */
+	set_irq_type(ILC_EXT_IRQ(1), IRQ_TYPE_LEVEL_LOW);
+	set_irq_type(ILC_EXT_IRQ(2), IRQ_TYPE_LEVEL_LOW);
+#endif
+}
+
+struct sh_machine_vector mv_pdk7105 __initmv = {
+	.mv_name		= "pdk7105",
+	.mv_setup		= pdk7105_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= pdk7105_init_irq,
+	.mv_ioport_map		= pdk7105_ioport_map,
+};
+

diff -Naur a/drivers/usb/storage/usb.c b/drivers/usb/storage/usb.c
--- a/drivers/usb/storage/usb.c	2014-01-12 18:14:21.000000000 +0800
+++ b/drivers/usb/storage/usb.c	2013-10-20 11:18:17.252392016 +0800
@@ -68,7 +68,8 @@
 
 #include "sierra_ms.h"
 #include "option_ms.h"
-
+#include <linux/stm/stx7105.h>
+static int myflag = 0;
 /* Some informational data */
 MODULE_AUTHOR("Matthew Dharm <mdharm-usb@one-eyed-alien.net>");
 MODULE_DESCRIPTION("USB Mass Storage driver for Linux");
@@ -842,10 +843,17 @@
 		/* Should we unbind if no devices were detected? */
 	}
 
+/* add by wgzhu smit */
+
+	complete (&us->thread_done);
 	complete_and_exit(&us->scanning_done, 0);
 }
 
 
+
+
+
+
 /* First part of general USB mass-storage probing */
 int usb_stor_probe1(struct us_data **pus,
 		struct usb_interface *intf,
@@ -881,6 +889,9 @@
 	init_waitqueue_head(&us->delay_wait);
 	init_completion(&us->scanning_done);
 
+/* add by wgzhu smit*/
+	init_completion(&us->thread_done);
+
 	/* Associate the us_data structure with the USB device */
 	result = associate_dev(us, intf);
 	if (result)
@@ -954,6 +965,20 @@
 
 	wake_up_process(th);
 
+	/* add by wgzhu smit*/
+
+	if (!myflag) {
+		myflag = 1;
+	    stx7105_configure_usb(1, &(struct stx7105_usb_config) {
+            .ovrcur_mode = stx7105_usb_ovrcur_active_low,
+            .pwr_enabled = 1,
+            .routing.usb1.ovrcur = stx7105_usb1_ovrcur_pio4_6,
+            .routing.usb1.pwr = stx7105_usb1_pwr_pio4_7, });
+	}
+	
+	wait_for_completion(&us->thread_done);
+
+
 	return 0;
 
 	/* We come here if there are any problems */
diff -Naur a/drivers/usb/storage/usb.h b/drivers/usb/storage/usb.h
--- a/drivers/usb/storage/usb.h	2009-12-03 11:51:21.000000000 +0800
+++ b/drivers/usb/storage/usb.h	2013-10-20 01:17:15.474522168 +0800
@@ -147,7 +147,8 @@
 	struct completion	notify;		 /* thread begin/end	    */
 	wait_queue_head_t	delay_wait;	 /* wait during scan, reset */
 	struct completion	scanning_done;	 /* wait for scan thread    */
-
+/* add by wgzhu smit */
+	struct completion       thread_done;    /* wait for thread exit */
 	/* subdriver information */
 	void			*extra;		 /* Any extra data          */
 	extra_data_destructor	extra_destructor;/* extra data destructor   */
@@ -168,6 +169,8 @@
 	return (struct us_data *) host->hostdata;
 }
 
+
+
 /* Function to fill an inquiry response. See usb.c for details */
 extern void fill_inquiry_response(struct us_data *us,
 	unsigned char *data, unsigned int data_len);

diff -Naur a/arch/sh/Kconfig b/arch/sh/Kconfig
--- a/arch/sh/Kconfig	2014-01-12 18:14:22.000000000 +0800
+++ b/arch/sh/Kconfig	2014-01-12 20:18:16.916879300 +0800
@@ -908,6 +908,7 @@
 				SH_7751_SOLUTION_ENGINE
 	default "0x00004000" if PAGE_SIZE_16KB || SH_SH03
 	default "0x00002000" if PAGE_SIZE_8KB
+    default "0x00800000" if SH_ST_PDK7105
 	default "0x00001000"
 	help
 	  This sets the default offset of zero page.
diff -Naur a/arch/sh/Makefile b/arch/sh/Makefile
--- a/arch/sh/Makefile	2014-01-12 18:14:22.000000000 +0800
+++ b/arch/sh/Makefile	2013-07-21 01:19:21.000000000 +0800
@@ -201,6 +201,7 @@
 machdir-$(CONFIG_SH_ST_MB837)			+= mach-mb837 mach-st
 machdir-$(CONFIG_SH_ST_MB839)			+= mach-mb839
 machdir-$(CONFIG_SH_ST_MB903)			+= mach-mb903
+machdir-$(CONFIG_SH_ST_PDK7105)         += mach-pdk7105
 
 ifneq ($(machdir-y),)
 core-y	+= $(addprefix arch/sh/boards/, \

